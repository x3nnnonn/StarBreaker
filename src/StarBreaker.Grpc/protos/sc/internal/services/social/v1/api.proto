syntax = "proto3";

package sc.internal.services.social.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "sc/external/common/api/v1/pagination.proto";
import "sc/external/services/social/v1/types.proto";

service SocialService {
  rpc CreateGroup ( CreateGroupRequest ) returns ( CreateGroupResponse );
  rpc InviteToNewGroup ( InviteToNewGroupRequest ) returns ( InviteToNewGroupResponse );
  rpc RenameGroup ( RenameGroupRequest ) returns ( RenameGroupResponse );
  rpc DestroyGroup ( DestroyGroupRequest ) returns ( DestroyGroupResponse );
  rpc GetGroupsById ( GetGroupsByIdRequest ) returns ( GetGroupsByIdResponse );
  rpc ListMemberGroups ( ListMemberGroupsRequest ) returns ( ListMemberGroupsResponse );
  rpc AddGroupMembers ( AddGroupMembersRequest ) returns ( AddGroupMembersResponse );
  rpc RemoveGroupMember ( RemoveGroupMemberRequest ) returns ( RemoveGroupMemberResponse );
  rpc TransferGroupLeadership ( TransferGroupLeadershipRequest ) returns ( TransferGroupLeadershipResponse );
  rpc GetMemberPreferences ( GetMemberPreferencesRequest ) returns ( GetMemberPreferencesResponse );
  rpc SetMemberPreferences ( SetMemberPreferencesRequest ) returns ( SetMemberPreferencesResponse );
  rpc SendGroupInvitation ( SendGroupInvitationRequest ) returns ( SendGroupInvitationResponse );
  rpc RevokeInvitationsFromMember ( RevokeInvitationsFromMemberRequest ) returns ( RevokeInvitationsFromMemberResponse );
  rpc ListGroupsByType ( ListGroupsByTypeRequest ) returns ( ListGroupsByTypeResponse );
  rpc ListPendingInvitations ( ListPendingInvitationsRequest ) returns ( ListPendingInvitationsResponse );
  rpc MuteMember ( MuteMemberRequest ) returns ( MuteMemberResponse );
  rpc UnmuteMember ( UnmuteMemberRequest ) returns ( UnmuteMemberResponse );
  rpc ListMutes ( ListMutesRequest ) returns ( ListMutesResponse );
  rpc AddGroupModerator ( AddGroupModeratorRequest ) returns ( AddGroupModeratorResponse );
  rpc RemoveGroupModerator ( RemoveGroupModeratorRequest ) returns ( RemoveGroupModeratorResponse );
}

message CreateGroupRequest {
  string id = 1;
  external.services.social.v1.GroupType type = 2;
  string name = 3;
  string leader_urn = 4;
  external.services.social.v1.GroupSettings settings = 5;
  repeated external.services.social.v1.GroupMember members = 6;
  string parent_urn = 7;
  repeated string moderators = 8;
}

message CreateGroupResponse {
  external.services.social.v1.Group group = 1;
}

message InviteToNewGroupRequest {
  string group_id = 1;
  external.services.social.v1.GroupType group_type = 2;
  string group_name = 3;
  external.services.social.v1.GroupSettings group_settings = 5;
  string member_urn = 6;
}

message InviteToNewGroupResponse {
  external.services.social.v1.Invitation invitation = 1;
}

message RenameGroupRequest {
  string group_id = 1;
  string name = 2;
}

message RenameGroupResponse {}

message DestroyGroupRequest {
  string group_id = 1;
}

message DestroyGroupResponse {}

message GetGroupsByIdRequest {
  repeated string group_ids = 1;
}

message GetGroupsByIdResponse {
  repeated external.services.social.v1.Group groups = 1;
}

message AddGroupMembersRequest {
  string group_id = 1;
  repeated external.services.social.v1.GroupMember members = 2;
  bool allow_partial_existing = 3;
}

message AddGroupMembersResponse {}

message RemoveGroupMemberRequest {
  string group_id = 1;
  string member_urn = 2;
}

message RemoveGroupMemberResponse {}

message TransferGroupLeadershipRequest {
  string group_id = 1;
  string player_urn = 2;
}

message TransferGroupLeadershipResponse {}

message ListMemberGroupsRequest {
  string member_urn = 1;
  external.services.social.v1.GroupFilters filters = 2;
  external.common.api.v1.PaginationArguments pagination = 3;
}

message ListMemberGroupsResponse {
  repeated external.services.social.v1.Group groups = 1;
  external.common.api.v1.PaginationInfo page_info = 2;
}

message GetMemberPreferencesRequest {
  string member_urn = 1;
  string group_id = 2;
}

message GetMemberPreferencesResponse {
  external.services.social.v1.GroupMemberPreferences preferences = 1;
}

message SetMemberPreferencesRequest {
  external.services.social.v1.GroupMemberPreferences preferences = 1;
}

message SetMemberPreferencesResponse {}

message SendGroupInvitationRequest {
  string group_id = 1;
  repeated string member_urn = 2;
  string from_urn = 4;
  map<string, string> metadata = 5;

}

message SendGroupInvitationResponse {
  repeated external.services.social.v1.Invitation invitations = 1;
}

message RevokeInvitationsFromMemberRequest {
  string member_urn = 1;
}

message RevokeInvitationsFromMemberResponse {}

message ListGroupsByTypeRequest {
  external.services.social.v1.GroupType type = 1;
  external.common.api.v1.PaginationArguments pagination = 2;
}

message ListGroupsByTypeResponse {
  repeated external.services.social.v1.Group groups = 1;
  external.common.api.v1.PaginationInfo page_info = 2;
}

message ListPendingInvitationsRequest {
  string member_urn = 1;
  external.services.social.v1.GroupType group_type = 2;
  external.common.api.v1.PaginationArguments pagination = 3;
}

message ListPendingInvitationsResponse {
  repeated external.services.social.v1.Invitation invitations = 1;
  external.common.api.v1.PaginationInfo page_info = 2;
}

message MuteMemberRequest {
  external.services.social.v1.Mute mute = 1;
}

message MuteMemberResponse {}

message UnmuteMemberRequest {
  external.services.social.v1.Mute unmute = 1;
}

message UnmuteMemberResponse {}

message ListMutesRequest {
  string member_urn = 1;
}

message ListMutesResponse {
  repeated external.services.social.v1.Mute mutes = 1;
}

message AddGroupModeratorRequest {
  string group_id = 1;
  string moderator_urn = 2;
}

message AddGroupModeratorResponse {}

message RemoveGroupModeratorRequest {
  string group_id = 1;
  string moderator_urn = 2;
}

message RemoveGroupModeratorResponse {}

