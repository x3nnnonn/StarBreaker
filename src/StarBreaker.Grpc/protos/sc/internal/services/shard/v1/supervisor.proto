syntax = "proto3";

package sc.internal.services.shard.v1;

import "sc/internal/common/shard/v1/types.proto";
import "sc/external/common/shard/v1/types.proto";
import "sc/external/common/network/v1/types.proto";
import "google/protobuf/timestamp.proto";

service ShardSupervisorService {
  rpc ReserveSeats ( ReserveSeatsRequest ) returns ( ReserveSeatsResponse );
  rpc GetSeat ( GetSeatRequest ) returns ( GetSeatResponse );
  rpc ReleaseSeats ( ReleaseSeatsRequest ) returns ( ReleaseSeatsResponse );
  rpc ModifySeatMap ( ModifySeatMapRequest ) returns ( ModifySeatMapResponse );
  rpc GatewayStream (stream GatewayStreamRequest ) returns (stream GatewayStreamResponse );
  rpc DGSStream (stream DGSStreamRequest ) returns (stream DGSStreamResponse );
}

message ReserveSeatsRequest {
  repeated ReserveSeatCommand commands = 1;

  message ReserveSeatCommand {
    uint64 player_id = 1;
    external.common.shard.v1.SeatCriterias criterias = 2;
    .google.protobuf.Timestamp until = 3;
  }
}

message ReserveSeatsResponse {
  repeated common.shard.v1.Reservation reservations = 1;
}

message GetSeatRequest {
  uint64 player_id = 1;
}

message GetSeatResponse {
  uint64 player_id = 1;
  common.shard.v1.SeatStatus status = 2;
  external.common.shard.v1.SeatCriterias criterias = 3;
  common.shard.v1.Reservation reservation = 4;
}

message ReleaseSeatsRequest {
  repeated uint64 player_id = 1;
}

message ReleaseSeatsResponse {
  repeated uint64 player_id = 1;
}

message ModifySeatMapRequest {
  repeated common.shard.v1.CriteriaCountPair to_remove = 1;
  repeated common.shard.v1.CriteriaCountPair to_add = 2;
}

message ModifySeatMapResponse {}

message GatewayStreamRequest {
  oneof request {
    PlayerConnected connected = 1;
    PlayerDisconnected disconnected = 2;
  }

  message PlayerConnected {
    uint64 player_id = 1;
  }
  message PlayerDisconnected {
    uint64 player_id = 1;
    bool expected = 2;
  }
}

message GatewayStreamResponse {
  oneof response {
    PlayerIncoming player_incoming = 1;
    PlayerCanceled player_canceled = 2;
  }

  message PlayerIncoming {
    uint64 player_id = 1;
    external.common.network.v1.CryptographicKeys keys = 2;
  }
  message PlayerCanceled {
    uint64 player_id = 1;
  }
}

message DGSStreamRequest {}

message DGSStreamResponse {}

