syntax = "proto3";

package sc.internal.services.mission_service.v1;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "sc/external/common/mission/v1/missions.proto";
import "sc/external/common/mission/v1/contracts.proto";
import "sc/external/common/api/v1/query.proto";
import "sc/external/common/api/v1/pagination.proto";
import "sc/external/common/command/v1/types.proto";

service MissionService {
  rpc CreateMission ( CreateMissionRequest ) returns ( CreateMissionResponse );
  rpc AbandonMission ( AbandonMissionRequest ) returns ( AbandonMissionResponse );
  rpc OnPlayerJoinShard ( OnPlayerJoinShardRequest ) returns ( OnPlayerJoinShardResponse );
  rpc OnPlayerLeaveShard ( OnPlayerLeaveShardRequest ) returns ( OnPlayerLeaveShardResponse );
  rpc CreateMissionPhase ( CreateMissionPhaseRequest ) returns ( CreateMissionPhaseResponse );
  rpc UpdateMissionPhase ( UpdateMissionPhaseRequest ) returns ( UpdateMissionPhaseResponse );
  rpc CompleteMissionPhase ( CompleteMissionPhaseRequest ) returns ( CompleteMissionPhaseResponse );
  rpc UpsertObjective ( UpsertObjectiveRequest ) returns ( UpsertObjectiveResponse );
  rpc UpdateObjectiveProgress ( UpdateObjectiveProgressRequest ) returns ( UpdateObjectiveProgressResponse );
  rpc CompleteObjective ( CompleteObjectiveRequest ) returns ( CompleteObjectiveResponse );
  rpc QueryMissions ( QueryMissionsRequest ) returns ( QueryMissionsResponse );
  rpc QueryMissionLogs ( QueryMissionLogsRequest ) returns ( QueryMissionLogsResponse );
}

message CreateMissionRequest {
  external.common.mission.v1.MissionContract contract = 1;
  string mission_owner_urn = 2;
  external.common.command.v1.CommandArguments arguments = 3;
}

message CreateMissionResponse {
  string mission_id = 1;
}

message AbandonMissionRequest {
  string mission_id = 1;
  external.common.mission.v1.MissionState mission_state = 2;
  string reason = 3;
  external.common.command.v1.CommandArguments arguments = 4;
}

message AbandonMissionResponse {}

message OnPlayerJoinShardRequest {
  repeated Body players = 1;
  external.common.command.v1.CommandArguments arguments = 2;

  message Body {
    string player_urn = 1;
  }
}

message OnPlayerJoinShardResponse {}

message OnPlayerLeaveShardRequest {
  repeated Body players = 1;
  external.common.command.v1.CommandArguments arguments = 2;

  message Body {
    string player_urn = 1;
  }
}

message OnPlayerLeaveShardResponse {}

message CreateMissionPhaseRequest {
  repeated Body phases = 1;
  external.common.command.v1.CommandArguments arguments = 2;
  string active_mission_key = 3;

  message Body {
    string mission_phase_guid = 1;
    .google.protobuf.Timestamp expiry = 2;
    string autocomplete_objective_id = 3;
    external.common.mission.v1.MissionPhaseData data = 4;
  }
}

message CreateMissionPhaseResponse {}

message UpdateMissionPhaseRequest {
  repeated Body phases = 1;
  external.common.command.v1.CommandArguments arguments = 2;
  string mission_id = 3;

  message Body {
    string active_phase_key = 1;
    external.common.mission.v1.MissionPhaseData data = 2;
  }
}

message UpdateMissionPhaseResponse {}

message CompleteMissionPhaseRequest {
  repeated Body phases = 1;
  external.common.command.v1.CommandArguments arguments = 2;
  string mission_id = 3;

  message Body {
    external.common.mission.v1.MissionPhaseData data = 1;
    string active_phase_key = 2;
  }
}

message CompleteMissionPhaseResponse {}

message UpsertObjectiveRequest {
  repeated Body objectives = 1;
  external.common.command.v1.CommandArguments arguments = 2;
  string active_mission_key = 3;

  message Body {
    external.common.mission.v1.MissionObjective objective = 1;
  }
}

message UpsertObjectiveResponse {}

message UpdateObjectiveProgressRequest {
  repeated Body objectives = 1;
  external.common.command.v1.CommandArguments arguments = 2;
  string active_mission_key = 3;

  message Body {
    string objective_id = 1;
    int64 progress_delta = 2;
  }
}

message UpdateObjectiveProgressResponse {}

message CompleteObjectiveRequest {
  repeated Body objectives = 1;
  external.common.command.v1.CommandArguments arguments = 2;
  string active_mission_key = 3;

  message Body {
    string objective_id = 1;
    external.common.mission.v1.MissionObjectiveState state = 2;
  }
}

message CompleteObjectiveResponse {}

message QueryMissionsRequest {
  external.common.api.v1.Query query = 1;
}

message QueryMissionsResponse {
  repeated external.common.mission.v1.ActiveMission missions = 1;
  external.common.api.v1.PaginationInfo page_info = 2;
}

message QueryMissionLogsRequest {
  external.common.api.v1.Query query = 1;
}

message QueryMissionLogsResponse {
  repeated external.common.mission.v1.MissionLog logs = 1;
  external.common.api.v1.PaginationInfo page_info = 2;
}

