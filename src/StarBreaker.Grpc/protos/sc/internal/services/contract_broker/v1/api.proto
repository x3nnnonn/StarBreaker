syntax = "proto3";

package sc.internal.services.contract_broker.v1;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "sc/external/common/mission/v1/types.proto";
import "sc/external/common/mission/v1/contracts.proto";
import "sc/external/common/api/v1/query.proto";
import "sc/external/common/api/v1/pagination.proto";
import "sc/external/common/command/v1/types.proto";

service ContractBrokerService {
  rpc CreateContracts ( .sc.internal.services.contract_broker.v1.CreateContractsRequest ) returns ( .sc.internal.services.contract_broker.v1.CreateContractsResponse );
  rpc DestroyContracts ( .sc.internal.services.contract_broker.v1.DestroyContractsRequest ) returns ( .sc.internal.services.contract_broker.v1.DestroyContractsResponse );
  rpc DestroyAllContracts ( .sc.internal.services.contract_broker.v1.DestroyAllContractsRequest ) returns ( .sc.internal.services.contract_broker.v1.DestroyAllContractsResponse );
  rpc AcceptContract ( .sc.internal.services.contract_broker.v1.AcceptContractRequest ) returns ( .sc.internal.services.contract_broker.v1.AcceptContractResponse );
  rpc QueryAllAvailableContracts ( .sc.internal.services.contract_broker.v1.QueryAllAvailableContractsRequest ) returns ( .sc.internal.services.contract_broker.v1.QueryAllAvailableContractsResponse );
  rpc QueryContracts ( .sc.internal.services.contract_broker.v1.QueryContractsRequest ) returns ( .sc.internal.services.contract_broker.v1.QueryContractsResponse );
}

message CreateContractsRequest {
  repeated .sc.internal.services.contract_broker.v1.CreateContractsRequest.Body contracts = 1;

  message Body {
    .sc.external.common.mission.v1.MissionTemplate mission_template = 1;
    .sc.external.common.mission.v1.ContractPrerequisites prerequisites = 2;
    uint32 location_id = 4;
    .google.protobuf.Timestamp expiration_time = 6;
    bool reserve_locations = 7;
  }
}

message CreateContractsResponse {
  repeated string ids = 1;
}

message DestroyContractsRequest {
  repeated string contract_ids = 1;
}

message DestroyContractsResponse {}

message DestroyAllContractsRequest {}

message DestroyAllContractsResponse {}

message AcceptContractRequest {
  string id = 1;
  string shard_id = 2;
  repeated uint32 location_ids = 3;
  uint64 player_id = 4;
  .sc.external.common.command.v1.CommandArguments arguments = 5;
}

message AcceptContractResponse {
  string active_mission_id = 1;
}

message QueryAllAvailableContractsRequest {
  string shard_id = 1;
  repeated uint32 physical_location_ids = 2;
}

message QueryAllAvailableContractsResponse {
  repeated .sc.external.common.mission.v1.MissionContract contracts = 1;
}

message QueryContractsRequest {
  .sc.external.common.api.v1.Query query = 1;
}

message QueryContractsResponse {
  repeated .sc.external.common.mission.v1.MissionContract contracts = 1;
  .sc.external.common.api.v1.PaginationInfo page_info = 2;
}

